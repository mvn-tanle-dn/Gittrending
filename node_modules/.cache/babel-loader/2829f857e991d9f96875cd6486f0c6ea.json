{"ast":null,"code":"import _objectSpread from \"/Users/minmin/Documents/TuongTacMayTinh-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport { FETCH_TRENDING_FAILED, FETCH_TRENDING_SUCCESS, PROCESS_FETCH_TRENDING } from './types';\nvar API_URL = 'https://api.github.com/search/repositories';\n\nvar transformFilters = function transformFilters(filters) {\n  var transformedFilters = {};\n  var startMoment = moment(filters.dateRange.start);\n  var endMoment = moment(filters.dateRange.end);\n  var reposDate = \"created:\".concat(startMoment.format(), \"..\").concat(endMoment.format());\n  var reposLanguage = filters.language ? \"language:\".concat(filters.language, \" \") : '';\n  transformedFilters.q = reposLanguage + reposDate;\n  transformedFilters.sort = 'stars';\n  transformedFilters.order = 'desc';\n  return transformedFilters;\n};\n/**\n * @param {object} filters\n * @returns {Function}\n */\n\n\nexport var fetchTrending = function fetchTrending(filters) {\n  return function (dispatch) {\n    dispatch({\n      type: PROCESS_FETCH_TRENDING\n    });\n    axios.get(API_URL, {\n      params: transformFilters(filters),\n      headers: _objectSpread({}, filters.token ? {\n        Authorization: \"token \".concat(filters.token)\n      } : {})\n    }).then(function (response) {\n      dispatch({\n        type: FETCH_TRENDING_SUCCESS,\n        payload: {\n          start: moment(filters.dateRange.start).format(),\n          end: moment(filters.dateRange.end).format(),\n          data: response.data\n        }\n      });\n    }).catch(function (error) {\n      var message = error.response && error.response.data && error.response.data.message;\n\n      if (!message) {\n        message = error.message;\n      }\n\n      dispatch({\n        type: FETCH_TRENDING_FAILED,\n        payload: message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/minmin/Documents/TuongTacMayTinh-Client/src/redux/github/actions.js"],"names":["axios","moment","FETCH_TRENDING_FAILED","FETCH_TRENDING_SUCCESS","PROCESS_FETCH_TRENDING","API_URL","transformFilters","filters","transformedFilters","startMoment","dateRange","start","endMoment","end","reposDate","format","reposLanguage","language","q","sort","order","fetchTrending","dispatch","type","get","params","headers","token","Authorization","then","response","payload","data","catch","error","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SACEC,qBADF,EAEEC,sBAFF,EAGEC,sBAHF,QAIO,SAJP;AAMA,IAAMC,OAAO,GAAG,4CAAhB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AACpC,MAAMC,kBAAkB,GAAG,EAA3B;AAEA,MAAMC,WAAW,GAAGR,MAAM,CAACM,OAAO,CAACG,SAAR,CAAkBC,KAAnB,CAA1B;AACA,MAAMC,SAAS,GAAGX,MAAM,CAACM,OAAO,CAACG,SAAR,CAAkBG,GAAnB,CAAxB;AACA,MAAMC,SAAS,qBAAcL,WAAW,CAACM,MAAZ,EAAd,eAAuCH,SAAS,CAACG,MAAV,EAAvC,CAAf;AACA,MAAMC,aAAa,GAAGT,OAAO,CAACU,QAAR,sBAA+BV,OAAO,CAACU,QAAvC,SAAqD,EAA3E;AAEAT,EAAAA,kBAAkB,CAACU,CAAnB,GAAuBF,aAAa,GAAGF,SAAvC;AACAN,EAAAA,kBAAkB,CAACW,IAAnB,GAA0B,OAA1B;AACAX,EAAAA,kBAAkB,CAACY,KAAnB,GAA2B,MAA3B;AAEA,SAAOZ,kBAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;;;AACA,OAAO,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,CAAUd,OAAV,EAAmB;AAC9C,SAAO,UAACe,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEnB;AAAR,KAAD,CAAR;AAEAJ,IAAAA,KAAK,CACFwB,GADH,CACOnB,OADP,EACgB;AACZoB,MAAAA,MAAM,EAAEnB,gBAAgB,CAACC,OAAD,CADZ;AAEZmB,MAAAA,OAAO,oBACDnB,OAAO,CAACoB,KAAR,GAAgB;AAAEC,QAAAA,aAAa,kBAAWrB,OAAO,CAACoB,KAAnB;AAAf,OAAhB,GAA8D,EAD7D;AAFK,KADhB,EAOGE,IAPH,CAOQ,UAACC,QAAD,EAAc;AAClBR,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEpB,sBADC;AAEP4B,QAAAA,OAAO,EAAE;AACPpB,UAAAA,KAAK,EAAEV,MAAM,CAACM,OAAO,CAACG,SAAR,CAAkBC,KAAnB,CAAN,CAAgCI,MAAhC,EADA;AAEPF,UAAAA,GAAG,EAAEZ,MAAM,CAACM,OAAO,CAACG,SAAR,CAAkBG,GAAnB,CAAN,CAA8BE,MAA9B,EAFE;AAGPiB,UAAAA,IAAI,EAAEF,QAAQ,CAACE;AAHR;AAFF,OAAD,CAAR;AAQD,KAhBH,EAiBGC,KAjBH,CAiBS,UAACC,KAAD,EAAW;AAChB,UAAIC,OAAO,GACTD,KAAK,CAACJ,QAAN,IAAkBI,KAAK,CAACJ,QAAN,CAAeE,IAAjC,IAAyCE,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBG,OAD/D;;AAGA,UAAI,CAACA,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAGD,KAAK,CAACC,OAAhB;AACD;;AAEDb,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAErB,qBADC;AAEP6B,QAAAA,OAAO,EAAEI;AAFF,OAAD,CAAR;AAID,KA7BH;AA8BD,GAjCD;AAkCD,CAnCM","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\n\nimport {\n  FETCH_TRENDING_FAILED,\n  FETCH_TRENDING_SUCCESS,\n  PROCESS_FETCH_TRENDING,\n} from './types';\n\nconst API_URL = 'https://api.github.com/search/repositories';\n\nconst transformFilters = (filters) => {\n  const transformedFilters = {};\n\n  const startMoment = moment(filters.dateRange.start);\n  const endMoment = moment(filters.dateRange.end);\n  const reposDate = `created:${startMoment.format()}..${endMoment.format()}`;\n  const reposLanguage = filters.language ? `language:${filters.language} ` : '';\n\n  transformedFilters.q = reposLanguage + reposDate;\n  transformedFilters.sort = 'stars';\n  transformedFilters.order = 'desc';\n\n  return transformedFilters;\n};\n\n/**\n * @param {object} filters\n * @returns {Function}\n */\nexport const fetchTrending = function (filters) {\n  return (dispatch) => {\n    dispatch({ type: PROCESS_FETCH_TRENDING });\n\n    axios\n      .get(API_URL, {\n        params: transformFilters(filters),\n        headers: {\n          ...(filters.token ? { Authorization: `token ${filters.token}` } : {}),\n        },\n      })\n      .then((response) => {\n        dispatch({\n          type: FETCH_TRENDING_SUCCESS,\n          payload: {\n            start: moment(filters.dateRange.start).format(),\n            end: moment(filters.dateRange.end).format(),\n            data: response.data,\n          },\n        });\n      })\n      .catch((error) => {\n        let message =\n          error.response && error.response.data && error.response.data.message;\n\n        if (!message) {\n          message = error.message;\n        }\n\n        dispatch({\n          type: FETCH_TRENDING_FAILED,\n          payload: message,\n        });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}