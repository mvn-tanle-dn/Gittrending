{"ast":null,"code":"import _objectSpread from \"/Users/minmin/Documents/TuongTacMayTinh-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createTransform } from 'redux-persist';\nvar GithubTransform = createTransform( // transform state on its way to being serialized and persisted.\n_c = function _c(inboundState, key) {\n  inboundState = inboundState || {}; // Keep the first group only to avoid overflowing the storage\n\n  if (inboundState.repositories && inboundState.repositories.length > 1) {\n    inboundState = _objectSpread(_objectSpread({}, inboundState), {}, {\n      repositories: [inboundState.repositories[0]]\n    });\n  } // Do not persist `processing` flag or `error` information,\n  // as we want to start fresh on reload in such cases\n\n\n  inboundState = _objectSpread(_objectSpread({}, inboundState), {}, {\n    processing: false,\n    error: null\n  });\n  return inboundState;\n}, // transform state being rehydrated\nfunction (outboundState, key) {\n  return _objectSpread({}, outboundState);\n}, // define which reducers this transform gets called for.\n{\n  whitelist: ['github']\n});\n_c2 = GithubTransform;\nexport default GithubTransform;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GithubTransform$createTransform\");\n$RefreshReg$(_c2, \"GithubTransform\");","map":{"version":3,"sources":["/Users/minmin/Documents/TuongTacMayTinh-Client/src/redux/github/transform.js"],"names":["createTransform","GithubTransform","inboundState","key","repositories","length","processing","error","outboundState","whitelist"],"mappings":";AAAA,SAASA,eAAT,QAAgC,eAAhC;AAEA,IAAMC,eAAe,GAAGD,eAAe,EACrC;AADqC,KAErC,YAACE,YAAD,EAAeC,GAAf,EAAuB;AACrBD,EAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B,CADqB,CAGrB;;AACA,MAAIA,YAAY,CAACE,YAAb,IAA6BF,YAAY,CAACE,YAAb,CAA0BC,MAA1B,GAAmC,CAApE,EAAuE;AACrEH,IAAAA,YAAY,mCACPA,YADO;AAEVE,MAAAA,YAAY,EAAE,CAACF,YAAY,CAACE,YAAb,CAA0B,CAA1B,CAAD;AAFJ,MAAZ;AAID,GAToB,CAWrB;AACA;;;AACAF,EAAAA,YAAY,mCACPA,YADO;AAEVI,IAAAA,UAAU,EAAE,KAFF;AAGVC,IAAAA,KAAK,EAAE;AAHG,IAAZ;AAMA,SAAOL,YAAP;AACD,CAtBoC,EAuBrC;AACA,UAACM,aAAD,EAAgBL,GAAhB,EAAwB;AACtB,2BAAYK,aAAZ;AACD,CA1BoC,EA2BrC;AACA;AACEC,EAAAA,SAAS,EAAE,CAAC,QAAD;AADb,CA5BqC,CAAvC;MAAMR,e;AAiCN,eAAeA,eAAf","sourcesContent":["import { createTransform } from 'redux-persist';\n\nconst GithubTransform = createTransform(\n  // transform state on its way to being serialized and persisted.\n  (inboundState, key) => {\n    inboundState = inboundState || {};\n\n    // Keep the first group only to avoid overflowing the storage\n    if (inboundState.repositories && inboundState.repositories.length > 1) {\n      inboundState = {\n        ...inboundState,\n        repositories: [inboundState.repositories[0]],\n      };\n    }\n\n    // Do not persist `processing` flag or `error` information,\n    // as we want to start fresh on reload in such cases\n    inboundState = {\n      ...inboundState,\n      processing: false,\n      error: null,\n    };\n\n    return inboundState;\n  },\n  // transform state being rehydrated\n  (outboundState, key) => {\n    return { ...outboundState };\n  },\n  // define which reducers this transform gets called for.\n  {\n    whitelist: ['github'],\n  },\n);\n\nexport default GithubTransform;\n"]},"metadata":{},"sourceType":"module"}